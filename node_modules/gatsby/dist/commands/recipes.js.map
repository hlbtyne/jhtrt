{"version":3,"sources":["../../src/commands/recipes.ts"],"names":["module","exports","program","recipe","_","graphqlPort","telemetry","trackCli","name","scriptPath","require","resolve","subprocess","cwd","directory","all","env","FORCE_COLOR","stderr","on","data","console","log","toString","process","kill","forceKillAfterTimeout","DEBUG","logFile","path","join","fs","writeFileSync","Date","toJSON","writeStream","createWriteStream","flags","stdout","pipe","started","runRecipe","projectRoot"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAIAA,MAAM,CAACC,OAAP,GAAiB,MAAOC,OAAP,IAA4C;AAC3D,QAAMC,MAAM,GAAGD,OAAO,CAACE,CAAR,CAAU,CAAV,CAAf,CAD2D,CAE3D;AACA;;AACA,QAAMC,WAAW,GAAG,MAAM,yBAAW,IAAX,CAA1B;;AACAC,2BAAUC,QAAV,CAAoB,YAApB,EAAiC;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAjC,EAL2D,CAO3D;;;AACA,QAAMM,UAAU,GAAGC,OAAO,CAACC,OAAR,CAAiB,gCAAjB,CAAnB;;AAEA,QAAMC,UAAU,GAAG,oBAAO,MAAP,EAAc,CAACH,UAAD,EAAaJ,WAAb,CAAd,EAAyC;AAC1DQ,IAAAA,GAAG,EAAEX,OAAO,CAACY,SAD6C;AAE1DC,IAAAA,GAAG,EAAE,IAFqD;AAG1DC,IAAAA,GAAG,EAAE;AACH;AACA;AACA;AACAC,MAAAA,WAAW,EAAG;AAJX;AAHqD,GAAzC,CAAnB;AAUAL,EAAAA,UAAU,CAACM,MAAX,CAAkBC,EAAlB,CAAsB,MAAtB,EAA6BC,IAAI,IAAI;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAL,EAAZ;AACD,GAFD;AAGAC,EAAAA,OAAO,CAACL,EAAR,CAAY,MAAZ,EAAmB,MACjBP,UAAU,CAACa,IAAX,CAAiB,SAAjB,EAA2B;AACzBC,IAAAA,qBAAqB,EAAE;AADE,GAA3B,CADF,EAvB2D,CA4B3D;;AACA,MAAIF,OAAO,CAACR,GAAR,CAAYW,KAAhB,EAAuB;AACrB,UAAMC,OAAO,GAAGC,cAAKC,IAAL,CAAU5B,OAAO,CAACY,SAAlB,EAA8B,qBAA9B,CAAhB;;AACAiB,gBAAGC,aAAH,CAAiBJ,OAAjB,EAA2B,YAAW,IAAIK,IAAJ,GAAWC,MAAX,EAAoB,IAA1D;;AACA,UAAMC,WAAW,GAAGJ,YAAGK,iBAAH,CAAqBR,OAArB,EAA8B;AAAES,MAAAA,KAAK,EAAG;AAAV,KAA9B,CAApB;;AACAzB,IAAAA,UAAU,CAAC0B,MAAX,CAAkBC,IAAlB,CAAuBJ,WAAvB;AACD;;AAED,MAAIK,OAAO,GAAG,KAAd;AACA5B,EAAAA,UAAU,CAAC0B,MAAX,CAAkBnB,EAAlB,CAAsB,MAAtB,EAA6B,MAAM;AACjC,QAAI,CAACqB,OAAL,EAAc;AACZ,YAAMC,SAAS,GAAG/B,OAAO,CAAE,8BAAF,CAAzB;;AACA+B,MAAAA,SAAS,CAAC;AAAEtC,QAAAA,MAAF;AAAUE,QAAAA,WAAV;AAAuBqC,QAAAA,WAAW,EAAExC,OAAO,CAACY;AAA5C,OAAD,CAAT;AACA0B,MAAAA,OAAO,GAAG,IAAV;AACD;AACF,GAND;AAOD,CA5CD","sourcesContent":["import telemetry from \"gatsby-telemetry\"\nimport execa from \"execa\"\nimport path from \"path\"\nimport fs from \"fs\"\nimport detectPort from \"detect-port\"\n\nimport { IProgram } from \"./types\"\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  const recipe = program._[1]\n  // We don't really care what port is used for GraphQL as it's\n  // generally only for code to code communication or debugging.\n  const graphqlPort = await detectPort(4000)\n  telemetry.trackCli(`RECIPE_RUN`, { name: recipe })\n\n  // Start GraphQL serve\n  const scriptPath = require.resolve(`gatsby-recipes/dist/graphql.js`)\n\n  const subprocess = execa(`node`, [scriptPath, graphqlPort], {\n    cwd: program.directory,\n    all: true,\n    env: {\n      // Chalk doesn't want to output color in a child process\n      // as it (correctly) thinks it's not in a normal terminal environemnt.\n      // Since we're just returning data, we'll override that.\n      FORCE_COLOR: `true`,\n    },\n  })\n  subprocess.stderr.on(`data`, data => {\n    console.log(data.toString())\n  })\n  process.on(`exit`, () =>\n    subprocess.kill(`SIGTERM`, {\n      forceKillAfterTimeout: 2000,\n    })\n  )\n  // Log server output to a file.\n  if (process.env.DEBUG) {\n    const logFile = path.join(program.directory, `./recipe-server.log`)\n    fs.writeFileSync(logFile, `\\n-----\\n${new Date().toJSON()}\\n`)\n    const writeStream = fs.createWriteStream(logFile, { flags: `a` })\n    subprocess.stdout.pipe(writeStream)\n  }\n\n  let started = false\n  subprocess.stdout.on(`data`, () => {\n    if (!started) {\n      const runRecipe = require(`gatsby-recipes/dist/index.js`)\n      runRecipe({ recipe, graphqlPort, projectRoot: program.directory })\n      started = true\n    }\n  })\n}\n"],"file":"recipes.js"}