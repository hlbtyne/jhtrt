"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _gatsbyTelemetry = _interopRequireDefault(require("gatsby-telemetry"));

var _execa = _interopRequireDefault(require("execa"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _detectPort = _interopRequireDefault(require("detect-port"));

module.exports = async program => {
  const recipe = program._[1]; // We don't really care what port is used for GraphQL as it's
  // generally only for code to code communication or debugging.

  const graphqlPort = await (0, _detectPort.default)(4000);

  _gatsbyTelemetry.default.trackCli(`RECIPE_RUN`, {
    name: recipe
  }); // Start GraphQL serve


  const scriptPath = require.resolve(`gatsby-recipes/dist/graphql.js`);

  const subprocess = (0, _execa.default)(`node`, [scriptPath, graphqlPort], {
    cwd: program.directory,
    all: true,
    env: {
      // Chalk doesn't want to output color in a child process
      // as it (correctly) thinks it's not in a normal terminal environemnt.
      // Since we're just returning data, we'll override that.
      FORCE_COLOR: `true`
    }
  });
  subprocess.stderr.on(`data`, data => {
    console.log(data.toString());
  });
  process.on(`exit`, () => subprocess.kill(`SIGTERM`, {
    forceKillAfterTimeout: 2000
  })); // Log server output to a file.

  if (process.env.DEBUG) {
    const logFile = _path.default.join(program.directory, `./recipe-server.log`);

    _fs.default.writeFileSync(logFile, `\n-----\n${new Date().toJSON()}\n`);

    const writeStream = _fs.default.createWriteStream(logFile, {
      flags: `a`
    });

    subprocess.stdout.pipe(writeStream);
  }

  let started = false;
  subprocess.stdout.on(`data`, () => {
    if (!started) {
      const runRecipe = require(`gatsby-recipes/dist/index.js`);

      runRecipe({
        recipe,
        graphqlPort,
        projectRoot: program.directory
      });
      started = true;
    }
  });
};
//# sourceMappingURL=recipes.js.map